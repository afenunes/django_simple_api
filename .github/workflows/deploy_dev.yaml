name: Deploy on develop environment

on:
  push:
    tags:
      - develop

jobs:
  health-check:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgresdb
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Cache dependency
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Setup python environment
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Check Python version
        run: python --version
      - name: Install django
        run: pip install django
      - name: Install psycopg2
        run: pip install psycopg2
      - name: Install poetry
        run: pip install --no-cache-dir "poetry==1.1.4" && poetry --version
      - name: Cache Poetry virtualenv
        uses: actions/cache@v1
        id: cache
        with:
          path: ~/.virtualenvs
          key: poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Set Poetry config
        run: |
          poetry config virtualenvs.in-project false
          poetry config virtualenvs.path ~/.virtualenvs

      - name: Install Dependencies
        run: poetry install
        if: steps.cache.outputs.cache-hit != 'true'
#      - name: Install poetry
#        run: python -m pip install --no-cache-dir "poetry==1.1.4" && poetry --version
#      - name: Install requirements (poetry)
#        run: pip install poetry install
#      - name: Install pycodestyle TODO: Uncomment and resolve code style problems
#        run: pip install pycodestyle && pycodestyle --version
#      - name: Check Syntax
#        run: pycodestyle --statistics .
      - name: Run Migrations
        run: python manage.py migrate
      - name: Run Test
        run: python manage.py test

  tag-build-and-publish:
    needs: health-check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set variables
        run: |
          VER=$(cat VERSION)
          echo "VERSION=$VER" >> $GITHUB_ENV
          echo $VER
      - uses: rickstaa/action-create-tag@v1
        with:
          tag: ${{env.VERSION}}
          message: ${{env.VERSION}} tagged
      - name: docker login
        env:
          DOCKER_USER: ${{secrets.DOCKER_USER}}
          DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
        run:
          docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ${{secrets.DOCKER_USER}}/${{secrets.DOCKER_REPO}}:${{env.VERSION}}
